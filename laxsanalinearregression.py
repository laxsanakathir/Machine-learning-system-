# -*- coding: utf-8 -*-
"""Untitled31.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fRAMQBOBZTVVqEVD2bRCRKrLcZr4pDIr
"""

pip install google-api-python-client

import requests
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Function to get stock data from Alpha Vantage API
def get_stock_data(symbol, start_date, end_date, api_key):
    base_url = "https://www.alphavantage.co/query"
    function = "TIME_SERIES_DAILY"
    params = {
        "function": function,
        "symbol": symbol,
        "apikey": api_key,
        "outputsize": "full",
        "datatype": "json",
    }

    response = requests.get(base_url, params=params)
    data = response.json()

    return data["Time Series (Daily)"]

# User inputs
symbol = input("Enter the stock symbol: ")
start_date = input("Enter the start date (YYYY-MM-DD): ")
end_date = input("Enter the end date (YYYY-MM-DD): ")
api_key = "YOUR_ALPHAVANTAGE_API_KEY"  # Replace with your actual API key

# Fetch stock data using the API
data = get_stock_data(symbol, start_date, end_date, api_key)

# Lists to store opening and closing prices
opening_prices = []
closing_prices = []

# Extract opening and closing prices from data
for date, values in data.items():
    opening_prices.append(float(values['1. open']))
    closing_prices.append(float(values['4. close']))

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(opening_prices, closing_prices, test_size=0.2, random_state=42)

# Initialize and train the linear regression model
model = LinearRegression()
model.fit([[x] for x in X_train], y_train)

# Make predictions using the model
y_pred = model.predict([[x] for x in X_test])

# Calculate metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Print metrics
print("Mean Squared Error:", mse)
print("R-squared:", r2)

# Plotting the data points and regression line
plt.figure(figsize=(10, 6))
plt.scatter(X_test, y_test, color='blue', label='Actual Data')
plt.plot(X_test, y_pred, color='red', label='Regression Line')

plt.title('Stock Price Prediction Using Linear Regression')
plt.xlabel('Opening Price')
plt.ylabel('Closing Price')
plt.legend()
plt.grid(True)
plt.show()

import requests
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Function to get stock data from Alpha Vantage API
def get_stock_data(symbol, start_date, end_date, api_key):
    base_url = "https://www.alphavantage.co/query"
    function = "TIME_SERIES_DAILY"
    params = {
        "function": function,
        "symbol": symbol,
        "apikey": api_key,
        "outputsize": "full",
        "datatype": "json",
    }

    response = requests.get(base_url, params=params)
    data = response.json()

    return data["Time Series (Daily)"]

# User inputs
symbol = input("Enter the stock symbol: ")
start_date = input("Enter the start date (YYYY-MM-DD): ")
end_date = input("Enter the end date (YYYY-MM-DD): ")
api_key = "YOUR_ALPHAVANTAGE_API_KEY"  # Replace with your actual API key

# Fetch stock data using the API
data = get_stock_data(symbol, start_date, end_date, api_key)

# Lists to store opening and closing prices
opening_prices = []
closing_prices = []

# Extract opening and closing prices from data
for date, values in data.items():
    opening_prices.append(float(values['1. open']))
    closing_prices.append(float(values['4. close']))

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(opening_prices, closing_prices, test_size=0.2, random_state=42)

# Initialize and train the linear regression model
model = LinearRegression()
model.fit([[x] for x in X_train], y_train)

# Make predictions using the model
y_pred = model.predict([[x] for x in X_test])

# Calculate metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Print metrics
print("Mean Squared Error:", mse)
print("R-squared:", r2)

# Plotting the data points and regression line
plt.figure(figsize=(10, 6))
plt.scatter(X_test, y_test, color='blue', label='Actual Data')
plt.plot(X_test, y_pred, color='red', label='Regression Line')

plt.title('Stock Price Prediction Using Linear Regression')
plt.xlabel('Opening Price')
plt.ylabel('Closing Price')
plt.legend()
plt.grid(True)
plt.show()

import requests
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Function to get stock data from Alpha Vantage API
def get_stock_data(symbol, start_date, end_date, api_key):
    base_url = "https://www.alphavantage.co/query"
    function = "TIME_SERIES_DAILY"
    params = {
        "function": function,
        "symbol": symbol,
        "apikey": api_key,
        "outputsize": "full",
        "datatype": "json",
    }

    response = requests.get(base_url, params=params)
    data = response.json()

    return data["Time Series (Daily)"]

# User inputs
symbol = input("Enter the stock symbol: ")
start_date = input("Enter the start date (YYYY-MM-DD): ")
end_date = input("Enter the end date (YYYY-MM-DD): ")
api_key = "YOUR_ALPHAVANTAGE_API_KEY"  # Replace with your actual API key

# Fetch stock data using the API
data = get_stock_data(symbol, start_date, end_date, api_key)

# Lists to store opening and closing prices
opening_prices = []
closing_prices = []

# Extract opening and closing prices from data
for date, values in data.items():
    opening_prices.append(float(values['1. open']))
    closing_prices.append(float(values['4. close']))

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(opening_prices, closing_prices, test_size=0.2, random_state=42)

# Initialize and train the linear regression model
model = LinearRegression()
model.fit([[x] for x in X_train], y_train)

# Make predictions using the model
y_pred = model.predict([[x] for x in X_test])

# Calculate metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Print metrics
print("Mean Squared Error:", mse)
print("R-squared:", r2)

# Plotting the data points and regression line
plt.figure(figsize=(10, 6))
plt.scatter(X_test, y_test, color='blue', label='Actual Data')
plt.plot(X_test, y_pred, color='red', label='Regression Line')

plt.title('Stock Price Prediction Using Linear Regression')
plt.xlabel('Opening Price')
plt.ylabel('Closing Price')
plt.legend()
plt.grid(True)
plt.show()



import requests
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Function to get stock data from Alpha Vantage API
def get_stock_data(symbol, start_date, end_date, api_key):
    base_url = "https://www.alphavantage.co/query"
    function = "TIME_SERIES_DAILY"
    params = {
        "function": function,
        "symbol": symbol,
        "apikey": api_key,
        "outputsize": "full",
        "datatype": "json",
    }

    response = requests.get(base_url, params=params)
    data = response.json()

    return data["Time Series (Daily)"]

# User inputs
symbol = input("Enter the stock symbol: ")
start_date = input("Enter the start date (YYYY-MM-DD): ")
end_date = input("Enter the end date (YYYY-MM-DD): ")
api_key = "YOUR_ALPHAVANTAGE_API_KEY"  # Replace with your actual API key

# Fetch stock data using the API
data = get_stock_data(symbol, start_date, end_date, api_key)

# Lists to store opening and closing prices
opening_prices = []
closing_prices = []

# Extract opening and closing prices from data
for date, values in data.items():
    opening_prices.append(float(values['1. open']))
    closing_prices.append(float(values['4. close']))

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(opening_prices, closing_prices, test_size=0.2, random_state=42)

# Initialize and train the linear regression model
model = LinearRegression()
model.fit([[x] for x in X_train], y_train)

# Make predictions using the model
y_pred = model.predict([[x] for x in X_test])

# Calculate metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Print metrics
print("Mean Squared Error:", mse)
print("R-squared:", r2)

# Plotting the data points and regression line
plt.figure(figsize=(10, 6))
plt.scatter(X_test, y_test, color='blue', label='Actual Data')
plt.plot(X_test, y_pred, color='red', label='Regression Line')

plt.title('Stock Price Prediction Using Linear Regression')
plt.xlabel('Opening Price')
plt.ylabel('Closing Price')
plt.legend()
plt.grid(True)
plt.show()

import requests
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Function to get stock data from Alpha Vantage API
def get_stock_data(symbol, start_date, end_date, api_key):
    base_url = "https://www.alphavantage.co/query"
    function = "TIME_SERIES_DAILY"
    params = {
        "function": function,
        "symbol": symbol,
        "apikey": api_key,
        "outputsize": "full",
        "datatype": "json",
    }

    response = requests.get(base_url, params=params)
    data = response.json()

    return data["Time Series (Daily)"]

# User inputs
symbol = input("Enter the stock symbol: ")
start_date = input("Enter the start date (YYYY-MM-DD): ")
end_date = input("Enter the end date (YYYY-MM-DD): ")
api_key = "YOUR_ALPHAVANTAGE_API_KEY"  # Replace with your actual API key

# Fetch stock data using the API
data = get_stock_data(symbol, start_date, end_date, api_key)

# Lists to store opening and closing prices
opening_prices = []
closing_prices = []

# Extract opening and closing prices from data
for date, values in data.items():
    opening_prices.append(float(values['1. open']))
    closing_prices.append(float(values['4. close']))

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(opening_prices, closing_prices, test_size=0.2, random_state=42)

# Initialize and train the linear regression model
model = LinearRegression()
model.fit([[x] for x in X_train], y_train)

# Make predictions using the model
y_pred = model.predict([[x] for x in X_test])

# Calculate metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Print metrics
print("Mean Squared Error:", mse)
print("R-squared:", r2)

# Plotting the data points and regression line
plt.figure(figsize=(10, 6))
plt.scatter(X_test, y_test, color='blue', label='Actual Data')
plt.plot(X_test, y_pred, color='red', label='Regression Line')

plt.title('Stock Price Prediction Using Linear Regression')
plt.xlabel('Opening Price')
plt.ylabel('Closing Price')
plt.legend()
plt.grid(True)
plt.show()